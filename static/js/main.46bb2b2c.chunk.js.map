{"version":3,"sources":["Components/Logo/style.js","Components/Logo/index.js","style.js","App.js","serviceWorker.js","index.js"],"names":["S","LogoContainer","styled","div","Logo","h1","changeLogo","e","currentTarget","children","innerText","onClick","this","Component","Container1","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8vBAEA,IAAMA,EAAI,GAEVA,EAAEC,cAAgBC,IAAOC,IAAzB,KAcAH,EAAEI,KAAOF,IAAOG,GAAhB,KAMeL,QCHAI,E,2MAjBXE,WAAa,SAACC,GAEY,cADTA,EAAEC,cAAcC,SAAS,GAC9BC,UACJH,EAAEC,cAAcC,SAAS,GAAGC,UAAY,aAExCH,EAAEC,cAAcC,SAAS,GAAGC,UAAY,a,wEAI5C,OACI,kBAAC,EAAET,cAAH,CAAiBU,QAASC,KAAKN,YAC3B,kBAAC,EAAEF,KAAH,uB,GAZGS,a,ydCDnB,IAAMb,EAAI,GAEVA,EAAEc,WAAaZ,IAAOC,IAAtB,KAaeH,QCJAe,MARf,WACE,OACE,kBAAC,EAAED,WAAH,KACE,kBAAC,EAAD,QCIcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.46bb2b2c.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\nconst S = {}\n\nS.LogoContainer = styled.div`\n    font-family: 'Bellota', cursive;\n    width: 500px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: rgb(32,60,87);\n    border: 5px solid black;\n    border-radius: 25px;\n    &:hover {\n        background-color: maroon;\n    }\n`\n\nS.Logo = styled.h1`\n    color: white;\n    font-size: 50px;\n    margin: 50px 0;\n`\n\nexport default S","import React, { Component } from \"react\"\nimport S from \"./style\"\n\nclass Logo extends Component {\n    changeLogo = (e) => {\n        const logo = e.currentTarget.children[0]\n        if(logo.innerText === \"ETHAN KIM\") {\n            e.currentTarget.children[0].innerText = \"HONEYFROYO\"\n        } else {\n            e.currentTarget.children[0].innerText = \"ETHAN KIM\"\n        }\n    }\n    render() {\n        return(\n            <S.LogoContainer onClick={this.changeLogo}>\n                <S.Logo>ETHAN KIM</S.Logo>\n            </S.LogoContainer>\n        )\n    }\n}\n\nexport default Logo","import styled from \"styled-components\"\n\nconst S = {}\n\nS.Container1 = styled.div`\n  background-image: url(\"https://66.media.tumblr.com/e217ce43e0d51b2679bd464735b45be6/0a6e09610d08d3b5-75/s2048x3072/8297531dd6035c97f8b300ded58bb4fef160603e.jpg\");\n  background-position: 0px 100%;\n  background-repeat: no-repeat;\n  background-size: 80%;\n  background-color: rgb(246,246,246);\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nexport default S","import React from 'react';\nimport Logo from \"./Components/Logo\"\n\nimport S from \"./style\"\n\nfunction App() {\n  return (\n    <S.Container1>\n      <Logo />\n    </S.Container1>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}